package batch;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class CronScheduler implements Job {

	@Override
	public void execute(JobExecutionContext arg0) throws JobExecutionException {
		
		private String cronExpression;
		private Class<? extends Job> job;
		Scheduler scheduler; 	// 접근권한 default로 처리하면 같은 패키지에서 사용 가능 
		
		private String cronExpression;
		private Class<? extends Job> job;
		Scheduler scheduler; 	// 접근권한 default로 처리하면 같은 패키지에서 사용 가능 
		
		public CronScheduler(String cronExpression, Class<? extends Job> job) {
			super();
			this.cronExpression = cronExpression;
			this.job = job;
		}
		
		public void execute() {
			try {
				JobDetail jobDetail = JobBuilder.newJob(job)
						.withIdentity("job", "group1")
						.build();
				CronTrigger crontrigger = TriggerBuilder.newTrigger()
						.withIdentity("trigger", "group1")
						.withSchedule(CronScheduleBuilder.cronSchedule(cronExpression))
						.build();
				scheduler = StdSchedulerFactory.getDefaultScheduler();
				scheduler.start();
				scheduler.scheduleJob(jobDetail, crontrigger);
			} catch (SchedulerException e) {
				e.printStackTrace();
			}
			
		}
		

	}

}
